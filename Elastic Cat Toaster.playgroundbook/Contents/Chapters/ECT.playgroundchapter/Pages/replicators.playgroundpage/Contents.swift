//#-hidden-code
//
//  Contents.swift
//
//  Copyright Â© 2016,2017 Apple Inc. All rights reserved.
//
import UIKit
import PlaygroundSupport

let artView = ArtView(title: "Grid", frame: CGRect(x: 0, y: 0, width: 200, height: 200))
//#-end-hidden-code
/*:
 **Go ahead, run the code now.**
 
 ...
 
 This generates an art piece variant...

 Now... **swipe left on the art piece.**
 
 ...
 
 Keep swiping left to generate more variants.
 You can also go back on a variant by swiping to the right.
 
 Welcome to **Elastic Cat Toaster**!
 
 Sorry about the random name, it's really just a random name.
 I chose it like that because that's what this playground is all about, randomness.
 Randomness used in a not so random way to generate what I like to call a **Random Art Gallery**.
 
 In this playground I'm going to show 3 different pieces of Random Art.
 I'll tell you how they were created, how they work and also how you can play with them, because after all, this is a playground ðŸ˜‹.
 
 This piece is called: **Square Room**.
 It lays down instances of `SKSpriteNode` in a `Grid` scene and applies different properties like the size, color and shape to each sprite. This properties are randomly applied by the `Random` class.
 
 The `Random` class is just a wrapper of the random classes `GameplayKit` provides, and just like those clases, it needs a **seed** to work. A seed makes a random generator *deterministic*, which means that the same seed will always yield the same random values.
 
 This makes possible to generate a unique sequence of art variants by providing a single string.
 
 So why don't you go ahead and change the seed below. It can be your name, your birthday, or anything you can think of. Then re-run the code to see the art generated by that seed.
 */
let seed = /*#-editable-code Random seed*/"The iPhone X is top notch!"/*#-end-editable-code*/
let random = Random(seed: seed)
/*:
 **Awesome!**
 
 *Now... wait, if the sprites get random properties, why can I see repeated patterns in the result?*
 
 Random generators in old computers weren't that good because after a while, the sequence of generated values would repeat. Modern random generators are so good, that the sun would explode before you could see the sequence repeating.
 
 But for the purpose of this art piece, I took advantage of a repeating random sequence by making the `Random` class have a `period` property. A short period would mean a really simple pattern, and long period would mean a complex pattern.
 
 So iniside the `Grid` I use another `Random` generator to make the properties of the sprites repeat after a while.
 
 The code below has properties you can play with make the art varients look a certain way.
 They can be optional, if they are left `nil`, they would be randomly determined.
 
 Be aware that some properties can override others, if you have any doubt about what a property does, tap on it and select 'Help'. Use the autocomplete suggestions to guide you.
 
 But thats enough explaining, **let's play!**
 */
artView.regenerate = { (i) -> ArtScene in
  
  // If you want to skip to a certain variant in the sequence.
  let sequenceSkip = /*#-editable-code*/0/*#-end-editable-code*/
  
  let replicator = Replicator(seed: seed, dropValues: i + sequenceSkip, size: artView.frame.size)

  return replicator
}
//#-hidden-code
PlaygroundPage.current.liveView = artView
//#-end-hidden-code
/*:
 Done? Great!
 
 Now follow me to the next art piece called [Echo](@next)!
 */
