//#-hidden-code
//
//  Contents.swift
//
//  Copyright Â© 2016,2017 Apple Inc. All rights reserved.
//
import UIKit
import PlaygroundSupport

let artView = ArtView(title: "Grid", frame: CGRect(x: 0, y: 0, width: 200, height: 200))
//#-end-hidden-code
/*:
 **Go ahead, run the code now.**
 
 This generates an art piece variant...

 Now... **swipe left on the art piece.**
 
 Keep swiping left to generate more variants.
 You can also go back on a variant by swiping to the right.
 
 Welcome to **Elastic Cat Toaster**
 
 Sorry about the random name, it's really just a random name.
 I chose it like that because that's what this playground is all about, randomness.
 Randomness used in a not so random way to generate what I like to call a **Random Art Gallery**.
 
 In this playground I'm going to show 3 different pieces of Random Art.
 I'll tell you how they were created, how they work and also how you can play with them, because after all, this is a playground ðŸ˜‹.
 
 This piece is called: **Square Room**.
 It lays down instances of `SKSpriteNode` in a `Grid` scene and applies different properties like the size, color and shape to each sprite. This properties are randomly applied the `Random` class.
 
 The `Random` class is just a wrapper of the random classes `GameplayKit` provides, and just like those clases, this class need a **seed** to work. A seed makes a random generator *deterministic*, which means that the same seed will always yield the same random values.
 
 This makes possible to generate a unique sequence of art variants by providing a single string.
 
 So why don't you go ahead and change the seed to whatever you like. It can be your name, your birthday, or anything you can think of. Then re-run the code to see the art generated by that seed.
 */
let seed = /*#-editable-code Random seed*/"The iPhone X is top notch!"/*#-end-editable-code*/
let random = Random(seed: seed)
/*:
 ** Awesome!**
 
 *Now... wait, if the sprites get random properties, why can I see repeated patterns in the result?*
 
 Random generators in computers aren't really random, they are *pseudorandom*, they
 This is because iniside the `Grid` I use another `Random`

 */

artView.regenerate = { (i) -> ArtScene in
  let grid = Grid(seed: seed, dropValues: i, size: artView.frame.size)
  
  // Colors
  //#-editable-code
  grid.cellColor = /*#-editable-code Random seed*/nil/*#-end-editable-code*/
  grid.canvasColor = nil
  grid.colorPalette = nil
  //#-end-editable-code
  
  // Positions
  grid.allowFlips = nil
  grid.allowOffsets = nil
  
  // Sizes
  grid.cellScale = nil
  grid.allowRandomScale = nil
  
  // Number of cells
  grid.cellDivision = nil
  
  return grid
}

//#-hidden-code
PlaygroundPage.current.liveView = artView
//#-end-hidden-code

/*:

 When you're ready, head to the [next page](@next) for a new kind of spiral!
 */
